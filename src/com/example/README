This is an implementation a modular linear probing hash table which
dynamically adjusts it's size based on the table density.

The table index for a key is a composition of the client supplied Key
object hashCode method and internal modular hashing based on table size.
In other words, the target table index is computed as h(k) = k mod m
where m is the number of table entries and k is the integer hash code
generated by the Key object.

Collisions are resolved with a linear probing algorithm.  If the target
index is located in the top half of the table, the probe will operate
from the target index down to the end of the table.  If the target
index is located in the bottom half of the table, the probe will operate
from the target index up to the beginning of the table.

Resizing is performed when objects are added or removed from the table.
If adding an object to the table results in a table density greater than
the maxim table density; a larger table is created, entries are removed from
the existing table and hashed into the larger table, the empty table
is replaced with the larger table.  Conversely, when removing an entry from
the table results in a table density that is less than the minimum table
density; a smaller table is created, entries ar removed from the existing
table and hashed into the smaller table, the smaller table replaces the empty
table.